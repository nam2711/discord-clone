{"version":3,"sources":["ChatHeader.js","Message.js","features/appSlice.js","features/userSlice.js","firebase.js","Chat.js","SidebarChannel.js","Sidebar.js","Login.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["ChatHeader","channelName","className","placeholder","Message","timestamp","message","user","Avatar","src","photo","displayName","Date","toDate","toUTCString","appSlice","createSlice","name","initialState","channelId","reducers","setChannelInfo","state","action","payload","actions","selectChannelId","app","selectChannelName","userSlice","login","logout","selectUser","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","auth","provider","GoogleAuthProvider","Chat","useSelector","useState","input","setInput","messages","setMessages","useEffect","collection","doc","orderBy","onSnapshot","snapshot","docs","map","data","fontSize","value","onChange","e","target","disabled","type","onClick","preventDefault","add","FieldValue","serverTimestamp","SidebarChannel","id","dispatch","useDispatch","Sidebar","channels","setChannels","channel","prompt","signOut","uid","substring","Login","alt","Button","signInWithPopup","catch","error","alert","App","onAuthStateChanged","authUser","console","log","photoURL","email","configureStore","reducer","userReducer","appReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.509ed42e.chunk.js","sourcesContent":["import React from 'react';\r\nimport './ChatHeader.css';\r\nimport NotificationsIcon from '@material-ui/icons/Notifications';\r\nimport EditLocationRoundedIcon from '@material-ui/icons/EditLocationRounded';\r\nimport PeopleAltRoundedIcon from '@material-ui/icons/PeopleAltRounded';\r\nimport SearchRoundedIcon from '@material-ui/icons/SearchRounded';\r\nimport SendRoundedIcon from '@material-ui/icons/SendRounded';\r\nimport HelpRoundedIcon from '@material-ui/icons/HelpRounded';\r\n\r\nfunction ChatHeader({ channelName }) {\r\n  return (\r\n    <div className=\"chatHeader\">\r\n      <div className=\"chatHeader__left\">\r\n        <h3>\r\n          <span className=\"chatHeader__hash\">#</span>\r\n          {channelName}\r\n        </h3>\r\n      </div>\r\n      <div className=\"chatHeader__right\">\r\n        <NotificationsIcon />\r\n        <EditLocationRoundedIcon />\r\n        <PeopleAltRoundedIcon />\r\n\r\n        <div className=\"chatHeader__search\">\r\n          <input placeholder=\"Search\" />\r\n          <SearchRoundedIcon />\r\n        </div>\r\n        <SendRoundedIcon />\r\n        <HelpRoundedIcon />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatHeader;\r\n","import React from 'react';\r\nimport './Message.css';\r\nimport { Avatar } from '@material-ui/core';\r\n\r\nfunction Message({ timestamp, message, user }) {\r\n  return (\r\n    <div className=\"message\">\r\n      <Avatar src={user.photo} />\r\n      <div className=\"message__info\">\r\n        <h4>\r\n          {user.displayName}\r\n          <span className=\"message_timestamp\">\r\n            {new Date(timestamp?.toDate()).toUTCString()}\r\n          </span>\r\n        </h4>\r\n        <p> {message}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Message;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    channelId: null,\r\n    channelName: null\r\n  },\r\n  reducers: {\r\n    setChannelInfo: (state, action) => {\r\n      state.channelId = action.payload.channelId;\r\n      state.channelName = action.payload.channelName;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { setChannelInfo } = appSlice.actions;\r\n\r\nexport const selectChannelId = (state) => state.app.channelId;\r\nexport const selectChannelName = (state) => state.app.channelName;\r\n\r\nexport default appSlice.reducer;\r\n","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const userSlice = createSlice({\r\n  name: 'user',\r\n  initialState: {\r\n    user: null\r\n  },\r\n  reducers: {\r\n    login: (state, action) => {\r\n      state.user = action.payload;\r\n    },\r\n    logout: (state) => {\r\n      state.user = null;\r\n    }\r\n  }\r\n});\r\n\r\nexport const { login, logout } = userSlice.actions;\r\n\r\nexport const selectUser = (state) => state.user.user;\r\n\r\nexport default userSlice.reducer;\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: 'AIzaSyDk58815hP5QgMLxhHFoMUCOP3YedTnpbo',\r\n  authDomain: 'discord-clone-4766c.firebaseapp.com',\r\n  databaseURL: 'https://discord-clone-4766c.firebaseio.com',\r\n  projectId: 'discord-clone-4766c',\r\n  storageBucket: 'discord-clone-4766c.appspot.com',\r\n  messagingSenderId: '965989347277',\r\n  appId: '1:965989347277:web:f3d7eeae68694229319e84'\r\n};\r\n\r\nconst firebaseApp = firebase.initializeApp(firebaseConfig);\r\nconst db = firebaseApp.firestore();\r\nconst auth = firebase.auth();\r\nconst provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport { auth, provider };\r\nexport default db;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Chat.css';\r\nimport ChatHeader from './ChatHeader';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport CardGiftcardIcon from '@material-ui/icons/CardGiftcard';\r\nimport GifIcon from '@material-ui/icons/Gif';\r\nimport EmojiEmotionsIcon from '@material-ui/icons/EmojiEmotions';\r\nimport Message from './Message';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectChannelId, selectChannelName } from './features/appSlice';\r\nimport { selectUser } from './features/userSlice';\r\nimport db from './firebase';\r\nimport firebase from 'firebase';\r\n\r\nfunction Chat() {\r\n  const channelId = useSelector(selectChannelId);\r\n  const user = useSelector(selectUser);\r\n  const channelName = useSelector(selectChannelName);\r\n  const [input, setInput] = useState('');\r\n  const [messages, setMessages] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (channelId) {\r\n      db.collection('channels')\r\n        .doc(channelId)\r\n        .collection('messages')\r\n        .orderBy('timestamp', 'desc')\r\n        .onSnapshot((snapshot) =>\r\n          setMessages(snapshot.docs.map((doc) => doc.data()))\r\n        );\r\n    }\r\n  }, [channelId]);\r\n\r\n  const sendMessage = (e) => {\r\n    e.preventDefault();\r\n\r\n    db.collection('channels').doc(channelId).collection('messages').add({\r\n      timestamp: firebase.firestore.FieldValue.serverTimestamp(),\r\n      message: input,\r\n      user: user\r\n    });\r\n    setInput('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat\">\r\n      <ChatHeader channelName={channelName} />\r\n\r\n      <div className=\"chat__messages\">\r\n        {messages.map((message) => (\r\n          <Message\r\n            timestamp={message.timestamp}\r\n            message={message.message}\r\n            user={message.user}\r\n          />\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"chat__input\">\r\n        <AddCircleIcon fontSize=\"large\" />\r\n        <form>\r\n          <input\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            placeholder={`Message #${channelName}`}\r\n          />\r\n          <button\r\n            disabled={!channelId}\r\n            className=\"chat__inputButton\"\r\n            type=\"submit\"\r\n            onClick={sendMessage}\r\n          >\r\n            Send Message\r\n          </button>\r\n        </form>\r\n        <div className=\"chat__inputIcons\">\r\n          <CardGiftcardIcon fontSize=\"large\" />\r\n          <GifIcon fontSize=\"large\" />\r\n          <EmojiEmotionsIcon fontSize=\"large\" />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setChannelInfo } from './features/appSlice';\r\nimport './SidebarChannel.css';\r\n\r\nfunction SidebarChannel({ id, channelName }) {\r\n  const dispatch = useDispatch();\r\n  return (\r\n    <div\r\n      className=\"sidebarChannel\"\r\n      onClick={() =>\r\n        dispatch(\r\n          setChannelInfo({\r\n            channelId: id,\r\n            channelName: channelName\r\n          })\r\n        )\r\n      }\r\n    >\r\n      <h4>\r\n        <span className=\"sidebarChannel__hash\"># </span>\r\n        {channelName}\r\n      </h4>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarChannel;\r\n","import React, { useEffect, useState } from 'react';\r\nimport './Sidebar.css';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport SidebarChannel from './SidebarChannel';\r\nimport SignalCellularAltIcon from '@material-ui/icons/SignalCellularAlt';\r\nimport CallIcon from '@material-ui/icons/Call';\r\nimport InfoOutlinedIcon from '@material-ui/icons/InfoOutlined';\r\nimport MicIcon from '@material-ui/icons/Mic';\r\nimport HeadsetIcon from '@material-ui/icons/Headset';\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\nimport { Avatar } from '@material-ui/core';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectUser } from './features/userSlice';\r\nimport db, { auth } from './firebase';\r\n\r\nfunction Sidebar() {\r\n  const user = useSelector(selectUser);\r\n  const [channels, setChannels] = useState([]);\r\n\r\n  useEffect(() => {\r\n    db.collection('channels').onSnapshot((snapshot) =>\r\n      setChannels(\r\n        snapshot.docs.map((doc) => ({\r\n          id: doc.id,\r\n          channel: doc.data()\r\n        }))\r\n      )\r\n    );\r\n  }, []);\r\n\r\n  const handleAddChannel = () => {\r\n    const channelName = prompt('Enter a new channel name');\r\n    if (channelName) {\r\n      db.collection('channels').add({\r\n        channelName: channelName\r\n      });\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__top\">\r\n        <h3>Nam Nam</h3>\r\n        <ExpandMoreIcon />\r\n      </div>\r\n      <div className=\"sidebar__channels\">\r\n        <div className=\"sidebar__channelsHeader\">\r\n          <div className=\"sidebar__header\">\r\n            <ExpandMoreIcon />\r\n            <h4>Text Channels</h4>\r\n          </div>\r\n          <AddIcon onClick={handleAddChannel} className=\"sidebar__addChannel\" />\r\n        </div>\r\n        <div className=\"sidebar__channelsList\">\r\n          {channels.map(({ id, channel }) => (\r\n            <SidebarChannel\r\n              key={id}\r\n              id={id}\r\n              channelName={channel.channelName}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar__voice\">\r\n        <SignalCellularAltIcon\r\n          className=\"sidebar__voiceIcon\"\r\n          fontSize=\"large\"\r\n        />\r\n        <div className=\"sidebar__voiceInfo\">\r\n          <h3> Voice Connected</h3>\r\n          <p>Stream</p>\r\n        </div>\r\n\r\n        <div className=\"sidebar__voiceIcons\">\r\n          <InfoOutlinedIcon />\r\n          <CallIcon />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"sidebar__profile\">\r\n        <Avatar onClick={() => auth.signOut()} src={user.photo} />\r\n        <div className=\"sidebar__profileInfo\">\r\n          <h3>{user.displayName}</h3>\r\n          <p>#{user.uid.substring(0, 5)}</p>\r\n        </div>\r\n\r\n        <div className=\"sidebar__profileIcons\">\r\n          <MicIcon />\r\n          <HeadsetIcon />\r\n          <SettingsIcon />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Sidebar;\r\n","import { Button } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { auth, provider } from './firebase';\r\nimport './Login.css';\r\nfunction Login() {\r\n  const signIn = () => {\r\n    auth.signInWithPopup(provider).catch((error) => alert(error.message));\r\n  };\r\n  return (\r\n    <div className=\"login\">\r\n      <div className=\"login__logo\">\r\n        <img\r\n          src=\"https://upload.wikimedia.org/wikipedia/sco/thumb/9/98/Discord_logo.svg/603px-Discord_logo.svg.png\"\r\n          alt=\"\"\r\n        />\r\n      </div>\r\n      <Button onClick={signIn}>Sign In</Button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport './App.css';\r\nimport Chat from './Chat';\r\nimport Sidebar from './Sidebar';\r\nimport { login, logout, selectUser } from './features/userSlice';\r\nimport Login from './Login';\r\nimport { auth } from './firebase';\r\nfunction App() {\r\n  const dispatch = useDispatch();\r\n  const user = useSelector(selectUser);\r\n\r\n  useEffect(() => {\r\n    auth.onAuthStateChanged((authUser) => {\r\n      console.log('user is', authUser);\r\n      if (authUser) {\r\n        dispatch(\r\n          login({\r\n            uid: authUser.uid,\r\n            photo: authUser.photoURL,\r\n            email: authUser.email,\r\n            displayName: authUser.displayName\r\n          })\r\n        );\r\n      } else {\r\n        dispatch(logout());\r\n      }\r\n    });\r\n  }, [dispatch]);\r\n  return (\r\n    <div className=\"app\">\r\n      {user ? (\r\n        <>\r\n          <Sidebar />\r\n          <Chat />\r\n        </>\r\n      ) : (\r\n        <Login />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport userReducer from '../features/userSlice';\r\nimport appReducer from '../features/appSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    user: userReducer,\r\n    app: appReducer\r\n  }\r\n});\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport store from './app/store';\r\nimport { Provider } from 'react-redux';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}